{
  "address": "0x4A8d39Adb04d8cA9d1BAa8d227D5756740C611a8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_firstQuestion",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_encryptedAnswer",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_usdtContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotAnswerTime",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "roundId",
          "type": "uint24"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "respondent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "answer",
          "type": "string"
        }
      ],
      "name": "AnswerSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "roundId",
          "type": "uint24"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "question",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedAnswer",
              "type": "string"
            },
            {
              "internalType": "uint24",
              "name": "attendance",
              "type": "uint24"
            },
            {
              "internalType": "string",
              "name": "answer",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "prize",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "platformFeeTransferred",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct DailyPool.RoundInfo",
          "name": "roundInfo",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "NewRoundOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PlatformFeeTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "roundId",
          "type": "uint24"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        }
      ],
      "name": "PrizeClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "enum DailyPool.RANK",
          "name": "_rank",
          "type": "uint8"
        },
        {
          "internalType": "uint24",
          "name": "_players",
          "type": "uint24"
        }
      ],
      "name": "claimPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRoundId",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoMsigAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationMsigAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_nextQuestion",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_encryptedNextAnswer",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_answer",
          "type": "string"
        }
      ],
      "name": "executeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minAttendance",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "name": "roundInfos",
      "outputs": [
        {
          "internalType": "string",
          "name": "question",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "encryptedAnswer",
          "type": "string"
        },
        {
          "internalType": "uint24",
          "name": "attendance",
          "type": "uint24"
        },
        {
          "internalType": "string",
          "name": "answer",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "platformFeeTransferred",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "roundUserInfos",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAnswered",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "encryptedAnswer",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_newMinAttendance",
          "type": "uint24"
        }
      ],
      "name": "setMinAttendance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_encryptedAnswer",
          "type": "string"
        }
      ],
      "name": "submitAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtContract",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0c3b7dd98f93c4993a8b25a04adb1499dee2d1f5f96e60c0118a70bd0a5c4f2",
  "receipt": {
    "to": null,
    "from": "0x307cc392Ef5b722A6ED0e0b9F1cb93Ba6a0e956E",
    "contractAddress": "0x4A8d39Adb04d8cA9d1BAa8d227D5756740C611a8",
    "transactionIndex": 0,
    "gasUsed": "100676022",
    "logsBloom": "0xfffffffffffffffffffffffffffffff7fffffffbffffffffffffffffffffffffffffffffffffefffffffffffffffffffffffbfffffffffffffffffffffffffffffffffffffbfdfffffffffffffffffffffffbfffffffffffffffffffffffffffffefffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbffffffeffffffffffffbffffffffffffffffffbffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffff7ffffffffffff7fffffffffffffffffffffffffffffffffffffffff7fffffffefffffffffbfffffffffffffffffffffffffffffffbffffffffffffffeffff7fffffffaffdffffffffffff",
    "blockHash": "0xf5938116f7b9d4e817538295e8adf3211016f6efa0b6f7286eb692ce6bf8cef5",
    "transactionHash": "0xd0c3b7dd98f93c4993a8b25a04adb1499dee2d1f5f96e60c0118a70bd0a5c4f2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 944541,
        "transactionHash": "0xd0c3b7dd98f93c4993a8b25a04adb1499dee2d1f5f96e60c0118a70bd0a5c4f2",
        "address": "0x4A8d39Adb04d8cA9d1BAa8d227D5756740C611a8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000307cc392ef5b722a6ed0e0b9f1cb93ba6a0e956e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf5938116f7b9d4e817538295e8adf3211016f6efa0b6f7286eb692ce6bf8cef5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 944541,
        "transactionHash": "0xd0c3b7dd98f93c4993a8b25a04adb1499dee2d1f5f96e60c0118a70bd0a5c4f2",
        "address": "0x4A8d39Adb04d8cA9d1BAa8d227D5756740C611a8",
        "topics": [
          "0xce1a9957d155138ccc730d10951eac4bf1efd837be7e1d422d058a5c39ffdd67",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000000000000000000000000000000000006511c212"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000097175657374696f6e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015861746261496a78684c6e7464467275574d6833545a4a635349376f514935724467643439784a3841703341434468372f4c783176552f4b7832734e754363377655372f666b35752f634d46466f6654313371643477744246564d5a787135476d5752655777327436714c725931626e4d4d317263447977373464352b7946494548473038324655395135776f4b527935336f7032455a384576776c753171796a79313462486c654752465336554777547049592b2b5a67686a376a2f6e2f796f31517459685069793543364e51766c30324e705a544a5967392f7a5a4b563948787247496f33443552455841645a6d4474503638734a364a47717068414c4a446659496550487163394f2b4d394c54414476356569432b4d6d584b44704c67462b4768567868626f2b4a486e72706f692f4a6268623375736b662f70394f32545565466256585450314c30636e75456e6c656c5952513d3d00000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0xf5938116f7b9d4e817538295e8adf3211016f6efa0b6f7286eb692ce6bf8cef5"
      }
    ],
    "blockNumber": 944541,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "question1",
    "atbaIjxhLntdFruWMh3TZJcSI7oQI5rDgd49xJ8Ap3ACDh7/Lx1vU/Kx2sNuCc7vU7/fk5u/cMFFofT13qd4wtBFVMZxq5GmWReWw2t6qLrY1bnMM1rcDyw74d5+yFIEHG082FU9Q5woKRy53op2EZ8Evwlu1qyjy14bHleGRFS6UGwTpIY++Zghj7j/n/yo1QtYhPiy5C6NQvl02NpZTJYg9/zZKV9HxrGIo3D5REXAdZmDtP68sJ6JGqphALJDfYIePHqc9O+M9LTADv5eiC+MmXKDpLgF+GhVxhbo+JHnrpoi/Jbhb3uskf/p9O2TUeFbVXTP1L0cnuEnlelYRQ==",
    "0x8cDc8c7a027f18503f4A7C24e4b7488B08A56223"
  ],
  "numDeployments": 1,
  "solcInputHash": "9d8a45503329725611823cd290d460bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_firstQuestion\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_encryptedAnswer\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_usdtContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotAnswerTime\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"roundId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"respondent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"}],\"name\":\"AnswerSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"roundId\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedAnswer\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"attendance\",\"type\":\"uint24\"},{\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"platformFeeTransferred\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct DailyPool.RoundInfo\",\"name\":\"roundInfo\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"}],\"name\":\"NewRoundOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"roundId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"enum DailyPool.RANK\",\"name\":\"_rank\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"_players\",\"type\":\"uint24\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundId\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoMsigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationMsigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nextQuestion\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_encryptedNextAnswer\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_answer\",\"type\":\"string\"}],\"name\":\"executeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAttendance\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"roundInfos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedAnswer\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"attendance\",\"type\":\"uint24\"},{\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"platformFeeTransferred\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roundUserInfos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAnswered\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"encryptedAnswer\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_newMinAttendance\",\"type\":\"uint24\"}],\"name\":\"setMinAttendance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_encryptedAnswer\",\"type\":\"string\"}],\"name\":\"submitAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtContract\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimPrize(bytes,uint8,uint24)\":{\"details\":\"close prev round and open new one, operated by admin\",\"params\":{\"_players\":\"the number of players who submitted correct answer(excluding top winners)\",\"_rank\":\"winner's rank\",\"signature\":\"signed message with prize and winner address by platform owner\"}},\"executeRound(string,string,string)\":{\"details\":\"close prev round and open new one, operated by admin\",\"params\":{\"_answer\":\"current round's correct answer\",\"_encryptedNextAnswer\":\"new encrypted answer\",\"_nextQuestion\":\"new question\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"submitAnswer(string)\":{\"details\":\"encrypted from dapp using public key\",\"params\":{\"_encryptedAnswer\":\"answer that is submitted by user\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimPrize(bytes,uint8,uint24)\":{\"notice\":\"Function to claim prize\"},\"executeRound(string,string,string)\":{\"notice\":\"Function to finish prev round and start next one, executed by admin(backend)\"},\"setMinAttendance(uint24)\":{\"notice\":\"Function to set minimum number of participants\"},\"submitAnswer(string)\":{\"notice\":\"Function to submit answer from user side\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DailyPool.sol\":\"DailyPool\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/DailyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract DailyPool is ReentrancyGuard, Ownable {\\n  using ECDSA for bytes32;\\n\\n  uint256 public startTimestamp;\\n  uint256 public depositAmount;\\n  uint256 public lockedPoolAmount; // prev round's pool amount to be claimed\\n  uint24 public currentRoundId;\\n  uint24 public minAttendance = 2;\\n  ERC20 public usdtContract;\\n  address public daoMsigAddress = 0x7B941952696Dc372628E06Ee129cc14195788475;\\n  address public donationMsigAddress = 0x7B941952696Dc372628E06Ee129cc14195788475;\\n\\n  struct RoundInfo {\\n    string question;\\n    string encryptedAnswer;\\n    uint24 attendance; // the number of participants\\n    string answer; // revealed after round is finished. Entered at the end of the round.\\n    uint256 prize; // total prize of round\\n    bool platformFeeTransferred;\\n  }\\n\\n  struct UserInfo {\\n    bool isAnswered;\\n    string encryptedAnswer;\\n    uint256 prize;\\n  }\\n\\n  enum RANK {\\n    TopOne,\\n    TopFive,\\n    OTHERS\\n  }\\n  // Mapping for roundId -> question and answer\\n  mapping(uint24 => RoundInfo) public roundInfos;\\n  // Mapping for user funds, roundId -> userAddress -> UserInfo\\n  mapping(uint24 => mapping(address => UserInfo)) public roundUserInfos;\\n\\n  error NotAnswerTime();\\n\\n  event NewRoundOpened(uint24 indexed roundId, RoundInfo roundInfo, uint256 indexed startTimestamp);\\n  event AnswerSubmitted(uint24 indexed roundId, address indexed respondent, string answer);\\n  event PlatformFeeTransferred(uint256 indexed amount);\\n  event PrizeClaimed(uint24 indexed roundId, address indexed winner, uint256 indexed prize);\\n\\n  constructor(\\n    string memory _firstQuestion,\\n    string memory _encryptedAnswer,\\n    address _usdtContractAddress\\n  ) {\\n    usdtContract = ERC20(_usdtContractAddress);\\n    depositAmount = 10 ** usdtContract.decimals();\\n    startTimestamp = block.timestamp;\\n    roundInfos[currentRoundId].question = _firstQuestion;\\n    roundInfos[currentRoundId].encryptedAnswer = _encryptedAnswer;\\n\\n    emit NewRoundOpened(currentRoundId, roundInfos[currentRoundId], block.timestamp);\\n  }\\n\\n  ///@notice Function to finish prev round and start next one, executed by admin(backend)\\n  ///@param _nextQuestion new question\\n  ///@param _encryptedNextAnswer new encrypted answer\\n  ///@param _answer current round's correct answer\\n  ///@dev close prev round and open new one, operated by admin\\n  function executeRound(\\n    string calldata _nextQuestion,\\n    string calldata _encryptedNextAnswer,\\n    string calldata _answer\\n  ) external onlyOwner {\\n    require(block.timestamp >= startTimestamp + 1 days, \\\"Not finished previous round\\\");\\n    startTimestamp = block.timestamp;\\n    if (roundInfos[currentRoundId].attendance > minAttendance) {\\n      lockedPoolAmount += roundInfos[currentRoundId].prize; // add unclaimed prize to next pool\\n      roundInfos[currentRoundId].answer = _answer;\\n      _transferDaoPrize(currentRoundId); // transfer dao prize\\n      // start next round\\n      currentRoundId++;\\n      roundInfos[currentRoundId].encryptedAnswer = _encryptedNextAnswer;\\n      roundInfos[currentRoundId].question = _nextQuestion;\\n    }\\n\\n    emit NewRoundOpened(currentRoundId, roundInfos[currentRoundId], block.timestamp);\\n  }\\n\\n  ///@notice Function to submit answer from user side\\n  ///@param _encryptedAnswer answer that is submitted by user\\n  ///@dev encrypted from dapp using public key\\n  function submitAnswer(string calldata _encryptedAnswer) external nonReentrant {\\n    if (\\n      block.timestamp > startTimestamp + 1 days ||\\n      block.timestamp < startTimestamp + 1 days - 2 minutes\\n    ) {\\n      revert NotAnswerTime();\\n    }\\n    require(\\n      !roundUserInfos[currentRoundId][msg.sender].isAnswered,\\n      \\\"Already answered for this round\\\"\\n    );\\n    usdtContract.transferFrom(msg.sender, address(this), depositAmount);\\n    // save users' encrypted answers and increase attendance\\n\\n    roundInfos[currentRoundId].prize += depositAmount;\\n    roundInfos[currentRoundId].attendance++;\\n\\n    roundUserInfos[currentRoundId][msg.sender].encryptedAnswer = _encryptedAnswer;\\n    roundUserInfos[currentRoundId][msg.sender].isAnswered = true;\\n\\n    emit AnswerSubmitted(currentRoundId, msg.sender, _encryptedAnswer);\\n  }\\n\\n  ///@notice Function to claim prize\\n  ///@param signature signed message with prize and winner address by platform owner\\n  ///@param _rank winner's rank\\n  ///@param _players the number of players who submitted correct answer(excluding top winners)\\n  ///@dev close prev round and open new one, operated by admin\\n  function claimPrize(bytes calldata signature, RANK _rank, uint24 _players) external nonReentrant {\\n    require(_verifyPlatformOwner(signature, _rank), \\\"Wrong prize or signature\\\");\\n    require(\\n      roundUserInfos[currentRoundId - 1][msg.sender].isAnswered,\\n      \\\"Not answered for this round\\\"\\n    );\\n    require(roundUserInfos[currentRoundId - 1][msg.sender].prize == 0, \\\"Already Claimed\\\");\\n\\n    uint256 _prize = _calcPrizeFromRank(_rank, _players);\\n    _transferPrize(msg.sender, _prize);\\n    roundUserInfos[currentRoundId - 1][msg.sender].prize = _prize;\\n    lockedPoolAmount -= _prize;\\n    emit PrizeClaimed(currentRoundId - 1, msg.sender, _prize);\\n  }\\n\\n  ///@notice Function to set minimum number of participants\\n  function setMinAttendance(uint24 _newMinAttendance) external onlyOwner {\\n    require(_newMinAttendance > 0, \\\"Minimum attendance should be more than 0\\\");\\n    minAttendance = _newMinAttendance;\\n  }\\n\\n  ///@notice Function to send platform fee for dao and donation\\n  function _transferDaoPrize(uint24 _roundId) private nonReentrant {\\n    require(_roundId == currentRoundId, \\\"Not finished round\\\");\\n    require(!roundInfos[_roundId].platformFeeTransferred, \\\"Already claimed\\\");\\n    _transferPrize(daoMsigAddress, (lockedPoolAmount * 3) / 100);\\n    _transferPrize(donationMsigAddress, (lockedPoolAmount * 2) / 100);\\n    roundInfos[_roundId].platformFeeTransferred = true;\\n    lockedPoolAmount = (lockedPoolAmount * 95) / 100;\\n    emit PlatformFeeTransferred((lockedPoolAmount * 5) / 100);\\n  }\\n\\n  function _transferPrize(address _to, uint256 _prize) private {\\n    bool sent = usdtContract.transfer(_to, _prize);\\n    require(sent, \\\"Failed to transfer prize\\\");\\n  }\\n\\n  /**\\n   * @notice Function to verify owner to get winner's prize\\n   * @dev\\n   * - Should encode winner's prize and winner address\\n   * - Get message from ECDSA library\\n   * - Recover address\\n   * - Return boolean if same as owner() true, not false\\n   */\\n  function _verifyPlatformOwner(bytes calldata signature, RANK _rank) private view returns (bool) {\\n    bytes32 hash = keccak256(abi.encodePacked(_rank, msg.sender));\\n    bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\n    address recoveredAddress = ECDSA.recover(message, signature);\\n    return (recoveredAddress == owner());\\n  }\\n\\n  function _calcPrizeFromRank(RANK _rank, uint24 _players) private view returns (uint256) {\\n    uint256 totalPrize = (roundInfos[currentRoundId - 1].prize * 95) / 100;\\n    if (_rank == RANK.TopOne) {\\n      return (totalPrize * 25) / 100;\\n    } else if (_rank == RANK.TopFive) {\\n      return (totalPrize * 5) / 100;\\n    } else {\\n      return (totalPrize * 50) / 100 / _players;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5fc9e8b150484f65aafdac49d2f016678bbec51f6adb41dc4d083241dc26f82c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526005805465ffffff0000001916630200000017905560068054737b941952696dc372628e06ee129cc141957884756001600160a01b031991821681179092556007805490911690911790553480156200005c57600080fd5b50604051620022bf380380620022bf8339810160408190526200007f9162000300565b60016000556200008f33620001e9565b80600560066101000a8154816001600160a01b0302191690836001600160a01b03160217905550600560069054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200010a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013091906200038d565b6200013d90600a620004ce565b6003554260025560055462ffffff1660009081526008602052604090206200016684826200056e565b5060055462ffffff1660009081526008602052604090206001016200018c83826200056e565b5060055462ffffff166000818152600860205260409081902090514292917fce1a9957d155138ccc730d10951eac4bf1efd837be7e1d422d058a5c39ffdd6791620001d89190620006bf565b60405180910390a35050506200074d565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200026357600080fd5b81516001600160401b03808211156200028057620002806200023b565b604051601f8301601f19908116603f01168101908282118183101715620002ab57620002ab6200023b565b81604052838152602092508683858801011115620002c857600080fd5b600091505b83821015620002ec5785820183015181830184015290820190620002cd565b600093810190920192909252949350505050565b6000806000606084860312156200031657600080fd5b83516001600160401b03808211156200032e57600080fd5b6200033c8783880162000251565b945060208601519150808211156200035357600080fd5b50620003628682870162000251565b604086015190935090506001600160a01b03811681146200038257600080fd5b809150509250925092565b600060208284031215620003a057600080fd5b815160ff81168114620003b257600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000410578160001904821115620003f457620003f4620003b9565b808516156200040257918102915b93841c9390800290620003d4565b509250929050565b6000826200042957506001620004c8565b816200043857506000620004c8565b81600181146200045157600281146200045c576200047c565b6001915050620004c8565b60ff841115620004705762000470620003b9565b50506001821b620004c8565b5060208310610133831016604e8410600b8410161715620004a1575081810a620004c8565b620004ad8383620003cf565b8060001904821115620004c457620004c4620003b9565b0290505b92915050565b6000620003b260ff84168362000418565b600181811c90821680620004f457607f821691505b6020821081036200051557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200056957600081815260208120601f850160051c81016020861015620005445750805b601f850160051c820191505b81811015620005655782815560010162000550565b5050505b505050565b81516001600160401b038111156200058a576200058a6200023b565b620005a2816200059b8454620004df565b846200051b565b602080601f831160018114620005da5760008415620005c15750858301515b600019600386901b1c1916600185901b17855562000565565b600085815260208120601f198616915b828110156200060b57888601518255948401946001909101908401620005ea565b50858210156200062a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081546200064981620004df565b8085526020600183811680156200066957600181146200068457620006b4565b60ff1985168884015283151560051b880183019550620006b4565b866000528260002060005b85811015620006ac5781548a82018601529083019084016200068f565b890184019650505b505050505092915050565b6020815260c060208201526000620006db60e08301846200063a565b601f1980848303016040850152620006f782600187016200063a565b915062ffffff600286015416606085015280848303016080850152506200072281600386016200063a565b9050600484015460a084015260ff6005850154166200074560c085018215159052565b509392505050565b611b62806200075d6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806387c20b33116100a2578063bb3e315911610071578063bb3e31591461023c578063bf72b6a41461024f578063d3b76d2914610262578063e6fd48bc14610278578063f2fde38b1461028157600080fd5b806387c20b33146101ec5780638da5cb5b146101ff5780639cbe5efd14610210578063b74ce10e1461023357600080fd5b806361220c99116100de57806361220c99146101a9578063715018a6146101be57806374a06694146101c65780637d232f74146101d957600080fd5b8063374c9b4814610110578063419759f51461013b5780635f6ef272146101525780636115092314610177575b600080fd5b61012361011e3660046114a9565b610294565b60405161013293929190611522565b60405180910390f35b61014460035481565b604051908152602001610132565b61016561016036600461154d565b61034e565b6040516101329695949392919061156f565b60055461019190600160301b90046001600160a01b031681565b6040516001600160a01b039091168152602001610132565b6101bc6101b736600461154d565b610529565b005b6101bc6105c0565b600754610191906001600160a01b031681565b6101bc6101e7366004611610565b6105d4565b600654610191906001600160a01b031681565b6001546001600160a01b0316610191565b60055461021f9062ffffff1681565b60405162ffffff9091168152602001610132565b61014460045481565b6101bc61024a3660046116aa565b6107a6565b6101bc61025d3660046116ec565b610a1f565b60055461021f906301000000900462ffffff1681565b61014460025481565b6101bc61028f366004611756565b610c57565b60096020908152600092835260408084209091529082529020805460018201805460ff90921692916102c590611771565b80601f01602080910402602001604051908101604052809291908181526020018280546102f190611771565b801561033e5780601f106103135761010080835404028352916020019161033e565b820191906000526020600020905b81548152906001019060200180831161032157829003601f168201915b5050505050908060020154905083565b60086020526000908152604090208054819061036990611771565b80601f016020809104026020016040519081016040528092919081815260200182805461039590611771565b80156103e25780601f106103b7576101008083540402835291602001916103e2565b820191906000526020600020905b8154815290600101906020018083116103c557829003601f168201915b5050505050908060010180546103f790611771565b80601f016020809104026020016040519081016040528092919081815260200182805461042390611771565b80156104705780601f1061044557610100808354040283529160200191610470565b820191906000526020600020905b81548152906001019060200180831161045357829003601f168201915b5050506002840154600385018054949562ffffff90921694919350915061049690611771565b80601f01602080910402602001604051908101604052809291908181526020018280546104c290611771565b801561050f5780601f106104e45761010080835404028352916020019161050f565b820191906000526020600020905b8154815290600101906020018083116104f257829003601f168201915b50505050600483015460059093015491929160ff16905086565b610531610cd0565b60008162ffffff161161059c5760405162461bcd60e51b815260206004820152602860248201527f4d696e696d756d20617474656e64616e63652073686f756c64206265206d6f72604482015267065207468616e20360c41b60648201526084015b60405180910390fd5b6005805462ffffff90921663010000000265ffffff00000019909216919091179055565b6105c8610cd0565b6105d26000610d2a565b565b6105dc610cd0565b6002546105ec90620151806117c1565b42101561063b5760405162461bcd60e51b815260206004820152601b60248201527f4e6f742066696e69736865642070726576696f757320726f756e6400000000006044820152606401610593565b42600290815560055462ffffff808216600090815260086020526040902090920154630100000090910482169116111561074d5760055462ffffff166000908152600860205260408120600490810154815490929061069b9084906117c1565b909155505060055462ffffff1660009081526008602052604090206003016106c4828483611838565b506005546106d69062ffffff16610d7c565b6005805462ffffff169060006106eb836118f9565b82546101009290920a62ffffff8181021990931691831602179091556005541660009081526008602052604090206001019050610729848683611838565b5060055462ffffff16600090815260086020526040902061074b868883611838565b505b60055462ffffff166000818152600860205260409081902090514292917fce1a9957d155138ccc730d10951eac4bf1efd837be7e1d422d058a5c39ffdd67916107969190611998565b60405180910390a3505050505050565b6107ae610f0c565b6002546107be90620151806117c1565b4211806107e657506078600254620151806107d991906117c1565b6107e39190611a17565b42105b1561080457604051631450077d60e21b815260040160405180910390fd5b60055462ffffff16600090815260096020908152604080832033845290915290205460ff16156108765760405162461bcd60e51b815260206004820152601f60248201527f416c726561647920616e73776572656420666f72207468697320726f756e64006044820152606401610593565b6005546003546040516323b872dd60e01b81523360048201523060248201526044810191909152600160301b9091046001600160a01b0316906323b872dd906064016020604051808303816000875af11580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb9190611a2a565b5060035460055462ffffff16600090815260086020526040812060040180549091906109289084906117c1565b909155505060055462ffffff908116600090815260086020526040812060020180549092169190610958836118f9565b82546101009290920a62ffffff818102199093169183160217909155600554166000908152600960209081526040808320338452909152902060010190506109a1828483611838565b506005805462ffffff908116600090815260096020908152604080832033808552925291829020805460ff19166001179055925490519116907fabf1365661f4189ee8cad69b4a07c2a628eb579f374248fd45d9bca5386d722590610a099086908690611a4c565b60405180910390a3610a1b6001600055565b5050565b610a27610f0c565b610a32848484610f65565b610a7e5760405162461bcd60e51b815260206004820152601860248201527f57726f6e67207072697a65206f72207369676e617475726500000000000000006044820152606401610593565b600554600990600090610a989060019062ffffff16611a7b565b62ffffff1681526020808201929092526040908101600090812033825290925290205460ff16610b0a5760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420616e73776572656420666f72207468697320726f756e6400000000006044820152606401610593565b600554600990600090610b249060019062ffffff16611a7b565b62ffffff1681526020808201929092526040908101600090812033825290925290206002015415610b895760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4810db185a5b5959608a1b6044820152606401610593565b6000610b95838361105c565b9050610ba13382611130565b6005548190600990600090610bbd9060019062ffffff16611a7b565b62ffffff1681526020808201929092526040908101600090812033825290925281206002019190915560048054839290610bf8908490611a17565b909155505060055481903390610c159060019062ffffff16611a7b565b62ffffff167f635f9c88f723bc4663c02f15122f9669a80c4f51d05020b0ee5153d774c7de3d60405160405180910390a450610c516001600055565b50505050565b610c5f610cd0565b6001600160a01b038116610cc45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610593565b610ccd81610d2a565b50565b6001546001600160a01b031633146105d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610d84610f0c565b60055462ffffff828116911614610dd25760405162461bcd60e51b8152602060048201526012602482015271139bdd08199a5b9a5cda1959081c9bdd5b9960721b6044820152606401610593565b62ffffff811660009081526008602052604090206005015460ff1615610e2c5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606401610593565b600654600454610e5d916001600160a01b031690606490610e4e906003611a97565b610e589190611aae565b611130565b600754600454610e7f916001600160a01b031690606490610e4e906002611a97565b62ffffff81166000908152600860205260409020600501805460ff19166001179055600454606490610eb290605f611a97565b610ebc9190611aae565b6004819055606490610ecf906005611a97565b610ed99190611aae565b6040517f321cc891f949e8d935c9c8c033b2a018ad00133147fb5cc9b29a49319ecd0ec790600090a2610ccd6001600055565b600260005403610f5e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610593565b6002600055565b6000808233604051602001610f7b929190611ae6565b6040516020818303038152906040528051906020012090506000610fec826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b905060006110308288888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061120392505050565b90506110446001546001600160a01b031690565b6001600160a01b039182169116149695505050505050565b6005546000908190606490600890839061107d9060019062ffffff16611a7b565b62ffffff1681526020810191909152604001600020600401546110a190605f611a97565b6110ab9190611aae565b905060008460028111156110c1576110c1611ad0565b036110e55760646110d3826019611a97565b6110dd9190611aae565b91505061112a565b60018460028111156110f9576110f9611ad0565b0361110b5760646110d3826005611a97565b62ffffff8316606461111e836032611a97565b6110d39190611aae565b505b92915050565b60055460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092600160301b9004169063a9059cbb906044016020604051808303816000875af115801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190611a2a565b9050806111fe5760405162461bcd60e51b815260206004820152601860248201527f4661696c656420746f207472616e73666572207072697a6500000000000000006044820152606401610593565b505050565b60008060006112128585611227565b9150915061121f8161126c565b509392505050565b600080825160410361125d5760208301516040840151606085015160001a611251878285856113b6565b94509450505050611265565b506000905060025b9250929050565b600081600481111561128057611280611ad0565b036112885750565b600181600481111561129c5761129c611ad0565b036112e95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610593565b60028160048111156112fd576112fd611ad0565b0361134a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610593565b600381600481111561135e5761135e611ad0565b03610ccd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610593565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156113ed5750600090506003611471565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611441573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661146a57600060019250925050611471565b9150600090505b94509492505050565b803562ffffff8116811461148d57600080fd5b919050565b80356001600160a01b038116811461148d57600080fd5b600080604083850312156114bc57600080fd5b6114c58361147a565b91506114d360208401611492565b90509250929050565b6000815180845260005b81811015611502576020818501810151868301820152016114e6565b506000602082860101526020601f19601f83011685010191505092915050565b831515815260606020820152600061153d60608301856114dc565b9050826040830152949350505050565b60006020828403121561155f57600080fd5b6115688261147a565b9392505050565b60c08152600061158260c08301896114dc565b828103602084015261159481896114dc565b905062ffffff8716604084015282810360608401526115b381876114dc565b6080840195909552505090151560a090910152949350505050565b60008083601f8401126115e057600080fd5b50813567ffffffffffffffff8111156115f857600080fd5b60208301915083602082850101111561126557600080fd5b6000806000806000806060878903121561162957600080fd5b863567ffffffffffffffff8082111561164157600080fd5b61164d8a838b016115ce565b9098509650602089013591508082111561166657600080fd5b6116728a838b016115ce565b9096509450604089013591508082111561168b57600080fd5b5061169889828a016115ce565b979a9699509497509295939492505050565b600080602083850312156116bd57600080fd5b823567ffffffffffffffff8111156116d457600080fd5b6116e0858286016115ce565b90969095509350505050565b6000806000806060858703121561170257600080fd5b843567ffffffffffffffff81111561171957600080fd5b611725878288016115ce565b90955093505060208501356003811061173d57600080fd5b915061174b6040860161147a565b905092959194509250565b60006020828403121561176857600080fd5b61156882611492565b600181811c9082168061178557607f821691505b6020821081036117a557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561112a5761112a6117ab565b634e487b7160e01b600052604160045260246000fd5b601f8211156111fe57600081815260208120601f850160051c810160208610156118115750805b601f850160051c820191505b818110156118305782815560010161181d565b505050505050565b67ffffffffffffffff831115611850576118506117d4565b6118648361185e8354611771565b836117ea565b6000601f84116001811461189857600085156118805750838201355b600019600387901b1c1916600186901b1783556118f2565b600083815260209020601f19861690835b828110156118c957868501358255602094850194600190920191016118a9565b50868210156118e65760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600062ffffff808316818103611911576119116117ab565b6001019392505050565b6000815461192881611771565b808552602060018381168015611945576001811461195f5761198d565b60ff1985168884015283151560051b88018301955061198d565b866000528260002060005b858110156119855781548a820186015290830190840161196a565b890184019650505b505050505092915050565b6020815260c0602082015260006119b260e083018461191b565b601f19808483030160408501526119cc826001870161191b565b915062ffffff600286015416606085015280848303016080850152506119f5816003860161191b565b9050600484015460a084015260ff60058501541661121f60c085018215159052565b8181038181111561112a5761112a6117ab565b600060208284031215611a3c57600080fd5b8151801515811461156857600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b62ffffff828116828216039080821115611128576111286117ab565b808202811582820484141761112a5761112a6117ab565b600082611acb57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b600060038410611b0657634e487b7160e01b600052602160045260246000fd5b5060f89290921b825260601b6bffffffffffffffffffffffff191660018201526015019056fea2646970667358221220d4b9ebca3e848ba957a0802850d2f04fb5334325a33c1be96c52b43fbcf54b2b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806387c20b33116100a2578063bb3e315911610071578063bb3e31591461023c578063bf72b6a41461024f578063d3b76d2914610262578063e6fd48bc14610278578063f2fde38b1461028157600080fd5b806387c20b33146101ec5780638da5cb5b146101ff5780639cbe5efd14610210578063b74ce10e1461023357600080fd5b806361220c99116100de57806361220c99146101a9578063715018a6146101be57806374a06694146101c65780637d232f74146101d957600080fd5b8063374c9b4814610110578063419759f51461013b5780635f6ef272146101525780636115092314610177575b600080fd5b61012361011e3660046114a9565b610294565b60405161013293929190611522565b60405180910390f35b61014460035481565b604051908152602001610132565b61016561016036600461154d565b61034e565b6040516101329695949392919061156f565b60055461019190600160301b90046001600160a01b031681565b6040516001600160a01b039091168152602001610132565b6101bc6101b736600461154d565b610529565b005b6101bc6105c0565b600754610191906001600160a01b031681565b6101bc6101e7366004611610565b6105d4565b600654610191906001600160a01b031681565b6001546001600160a01b0316610191565b60055461021f9062ffffff1681565b60405162ffffff9091168152602001610132565b61014460045481565b6101bc61024a3660046116aa565b6107a6565b6101bc61025d3660046116ec565b610a1f565b60055461021f906301000000900462ffffff1681565b61014460025481565b6101bc61028f366004611756565b610c57565b60096020908152600092835260408084209091529082529020805460018201805460ff90921692916102c590611771565b80601f01602080910402602001604051908101604052809291908181526020018280546102f190611771565b801561033e5780601f106103135761010080835404028352916020019161033e565b820191906000526020600020905b81548152906001019060200180831161032157829003601f168201915b5050505050908060020154905083565b60086020526000908152604090208054819061036990611771565b80601f016020809104026020016040519081016040528092919081815260200182805461039590611771565b80156103e25780601f106103b7576101008083540402835291602001916103e2565b820191906000526020600020905b8154815290600101906020018083116103c557829003601f168201915b5050505050908060010180546103f790611771565b80601f016020809104026020016040519081016040528092919081815260200182805461042390611771565b80156104705780601f1061044557610100808354040283529160200191610470565b820191906000526020600020905b81548152906001019060200180831161045357829003601f168201915b5050506002840154600385018054949562ffffff90921694919350915061049690611771565b80601f01602080910402602001604051908101604052809291908181526020018280546104c290611771565b801561050f5780601f106104e45761010080835404028352916020019161050f565b820191906000526020600020905b8154815290600101906020018083116104f257829003601f168201915b50505050600483015460059093015491929160ff16905086565b610531610cd0565b60008162ffffff161161059c5760405162461bcd60e51b815260206004820152602860248201527f4d696e696d756d20617474656e64616e63652073686f756c64206265206d6f72604482015267065207468616e20360c41b60648201526084015b60405180910390fd5b6005805462ffffff90921663010000000265ffffff00000019909216919091179055565b6105c8610cd0565b6105d26000610d2a565b565b6105dc610cd0565b6002546105ec90620151806117c1565b42101561063b5760405162461bcd60e51b815260206004820152601b60248201527f4e6f742066696e69736865642070726576696f757320726f756e6400000000006044820152606401610593565b42600290815560055462ffffff808216600090815260086020526040902090920154630100000090910482169116111561074d5760055462ffffff166000908152600860205260408120600490810154815490929061069b9084906117c1565b909155505060055462ffffff1660009081526008602052604090206003016106c4828483611838565b506005546106d69062ffffff16610d7c565b6005805462ffffff169060006106eb836118f9565b82546101009290920a62ffffff8181021990931691831602179091556005541660009081526008602052604090206001019050610729848683611838565b5060055462ffffff16600090815260086020526040902061074b868883611838565b505b60055462ffffff166000818152600860205260409081902090514292917fce1a9957d155138ccc730d10951eac4bf1efd837be7e1d422d058a5c39ffdd67916107969190611998565b60405180910390a3505050505050565b6107ae610f0c565b6002546107be90620151806117c1565b4211806107e657506078600254620151806107d991906117c1565b6107e39190611a17565b42105b1561080457604051631450077d60e21b815260040160405180910390fd5b60055462ffffff16600090815260096020908152604080832033845290915290205460ff16156108765760405162461bcd60e51b815260206004820152601f60248201527f416c726561647920616e73776572656420666f72207468697320726f756e64006044820152606401610593565b6005546003546040516323b872dd60e01b81523360048201523060248201526044810191909152600160301b9091046001600160a01b0316906323b872dd906064016020604051808303816000875af11580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb9190611a2a565b5060035460055462ffffff16600090815260086020526040812060040180549091906109289084906117c1565b909155505060055462ffffff908116600090815260086020526040812060020180549092169190610958836118f9565b82546101009290920a62ffffff818102199093169183160217909155600554166000908152600960209081526040808320338452909152902060010190506109a1828483611838565b506005805462ffffff908116600090815260096020908152604080832033808552925291829020805460ff19166001179055925490519116907fabf1365661f4189ee8cad69b4a07c2a628eb579f374248fd45d9bca5386d722590610a099086908690611a4c565b60405180910390a3610a1b6001600055565b5050565b610a27610f0c565b610a32848484610f65565b610a7e5760405162461bcd60e51b815260206004820152601860248201527f57726f6e67207072697a65206f72207369676e617475726500000000000000006044820152606401610593565b600554600990600090610a989060019062ffffff16611a7b565b62ffffff1681526020808201929092526040908101600090812033825290925290205460ff16610b0a5760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420616e73776572656420666f72207468697320726f756e6400000000006044820152606401610593565b600554600990600090610b249060019062ffffff16611a7b565b62ffffff1681526020808201929092526040908101600090812033825290925290206002015415610b895760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4810db185a5b5959608a1b6044820152606401610593565b6000610b95838361105c565b9050610ba13382611130565b6005548190600990600090610bbd9060019062ffffff16611a7b565b62ffffff1681526020808201929092526040908101600090812033825290925281206002019190915560048054839290610bf8908490611a17565b909155505060055481903390610c159060019062ffffff16611a7b565b62ffffff167f635f9c88f723bc4663c02f15122f9669a80c4f51d05020b0ee5153d774c7de3d60405160405180910390a450610c516001600055565b50505050565b610c5f610cd0565b6001600160a01b038116610cc45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610593565b610ccd81610d2a565b50565b6001546001600160a01b031633146105d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610d84610f0c565b60055462ffffff828116911614610dd25760405162461bcd60e51b8152602060048201526012602482015271139bdd08199a5b9a5cda1959081c9bdd5b9960721b6044820152606401610593565b62ffffff811660009081526008602052604090206005015460ff1615610e2c5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606401610593565b600654600454610e5d916001600160a01b031690606490610e4e906003611a97565b610e589190611aae565b611130565b600754600454610e7f916001600160a01b031690606490610e4e906002611a97565b62ffffff81166000908152600860205260409020600501805460ff19166001179055600454606490610eb290605f611a97565b610ebc9190611aae565b6004819055606490610ecf906005611a97565b610ed99190611aae565b6040517f321cc891f949e8d935c9c8c033b2a018ad00133147fb5cc9b29a49319ecd0ec790600090a2610ccd6001600055565b600260005403610f5e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610593565b6002600055565b6000808233604051602001610f7b929190611ae6565b6040516020818303038152906040528051906020012090506000610fec826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b905060006110308288888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061120392505050565b90506110446001546001600160a01b031690565b6001600160a01b039182169116149695505050505050565b6005546000908190606490600890839061107d9060019062ffffff16611a7b565b62ffffff1681526020810191909152604001600020600401546110a190605f611a97565b6110ab9190611aae565b905060008460028111156110c1576110c1611ad0565b036110e55760646110d3826019611a97565b6110dd9190611aae565b91505061112a565b60018460028111156110f9576110f9611ad0565b0361110b5760646110d3826005611a97565b62ffffff8316606461111e836032611a97565b6110d39190611aae565b505b92915050565b60055460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092600160301b9004169063a9059cbb906044016020604051808303816000875af115801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190611a2a565b9050806111fe5760405162461bcd60e51b815260206004820152601860248201527f4661696c656420746f207472616e73666572207072697a6500000000000000006044820152606401610593565b505050565b60008060006112128585611227565b9150915061121f8161126c565b509392505050565b600080825160410361125d5760208301516040840151606085015160001a611251878285856113b6565b94509450505050611265565b506000905060025b9250929050565b600081600481111561128057611280611ad0565b036112885750565b600181600481111561129c5761129c611ad0565b036112e95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610593565b60028160048111156112fd576112fd611ad0565b0361134a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610593565b600381600481111561135e5761135e611ad0565b03610ccd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610593565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156113ed5750600090506003611471565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611441573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661146a57600060019250925050611471565b9150600090505b94509492505050565b803562ffffff8116811461148d57600080fd5b919050565b80356001600160a01b038116811461148d57600080fd5b600080604083850312156114bc57600080fd5b6114c58361147a565b91506114d360208401611492565b90509250929050565b6000815180845260005b81811015611502576020818501810151868301820152016114e6565b506000602082860101526020601f19601f83011685010191505092915050565b831515815260606020820152600061153d60608301856114dc565b9050826040830152949350505050565b60006020828403121561155f57600080fd5b6115688261147a565b9392505050565b60c08152600061158260c08301896114dc565b828103602084015261159481896114dc565b905062ffffff8716604084015282810360608401526115b381876114dc565b6080840195909552505090151560a090910152949350505050565b60008083601f8401126115e057600080fd5b50813567ffffffffffffffff8111156115f857600080fd5b60208301915083602082850101111561126557600080fd5b6000806000806000806060878903121561162957600080fd5b863567ffffffffffffffff8082111561164157600080fd5b61164d8a838b016115ce565b9098509650602089013591508082111561166657600080fd5b6116728a838b016115ce565b9096509450604089013591508082111561168b57600080fd5b5061169889828a016115ce565b979a9699509497509295939492505050565b600080602083850312156116bd57600080fd5b823567ffffffffffffffff8111156116d457600080fd5b6116e0858286016115ce565b90969095509350505050565b6000806000806060858703121561170257600080fd5b843567ffffffffffffffff81111561171957600080fd5b611725878288016115ce565b90955093505060208501356003811061173d57600080fd5b915061174b6040860161147a565b905092959194509250565b60006020828403121561176857600080fd5b61156882611492565b600181811c9082168061178557607f821691505b6020821081036117a557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561112a5761112a6117ab565b634e487b7160e01b600052604160045260246000fd5b601f8211156111fe57600081815260208120601f850160051c810160208610156118115750805b601f850160051c820191505b818110156118305782815560010161181d565b505050505050565b67ffffffffffffffff831115611850576118506117d4565b6118648361185e8354611771565b836117ea565b6000601f84116001811461189857600085156118805750838201355b600019600387901b1c1916600186901b1783556118f2565b600083815260209020601f19861690835b828110156118c957868501358255602094850194600190920191016118a9565b50868210156118e65760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600062ffffff808316818103611911576119116117ab565b6001019392505050565b6000815461192881611771565b808552602060018381168015611945576001811461195f5761198d565b60ff1985168884015283151560051b88018301955061198d565b866000528260002060005b858110156119855781548a820186015290830190840161196a565b890184019650505b505050505092915050565b6020815260c0602082015260006119b260e083018461191b565b601f19808483030160408501526119cc826001870161191b565b915062ffffff600286015416606085015280848303016080850152506119f5816003860161191b565b9050600484015460a084015260ff60058501541661121f60c085018215159052565b8181038181111561112a5761112a6117ab565b600060208284031215611a3c57600080fd5b8151801515811461156857600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b62ffffff828116828216039080821115611128576111286117ab565b808202811582820484141761112a5761112a6117ab565b600082611acb57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b600060038410611b0657634e487b7160e01b600052602160045260246000fd5b5060f89290921b825260601b6bffffffffffffffffffffffff191660018201526015019056fea2646970667358221220d4b9ebca3e848ba957a0802850d2f04fb5334325a33c1be96c52b43fbcf54b2b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimPrize(bytes,uint8,uint24)": {
        "details": "close prev round and open new one, operated by admin",
        "params": {
          "_players": "the number of players who submitted correct answer(excluding top winners)",
          "_rank": "winner's rank",
          "signature": "signed message with prize and winner address by platform owner"
        }
      },
      "executeRound(string,string,string)": {
        "details": "close prev round and open new one, operated by admin",
        "params": {
          "_answer": "current round's correct answer",
          "_encryptedNextAnswer": "new encrypted answer",
          "_nextQuestion": "new question"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "submitAnswer(string)": {
        "details": "encrypted from dapp using public key",
        "params": {
          "_encryptedAnswer": "answer that is submitted by user"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimPrize(bytes,uint8,uint24)": {
        "notice": "Function to claim prize"
      },
      "executeRound(string,string,string)": {
        "notice": "Function to finish prev round and start next one, executed by admin(backend)"
      },
      "setMinAttendance(uint24)": {
        "notice": "Function to set minimum number of participants"
      },
      "submitAnswer(string)": {
        "notice": "Function to submit answer from user side"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2294,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2296,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "depositAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2298,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "lockedPoolAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2300,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "currentRoundId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint24"
      },
      {
        "astId": 2303,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "minAttendance",
        "offset": 3,
        "slot": "5",
        "type": "t_uint24"
      },
      {
        "astId": 2306,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "usdtContract",
        "offset": 6,
        "slot": "5",
        "type": "t_contract(ERC20)753"
      },
      {
        "astId": 2309,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "daoMsigAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2312,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "donationMsigAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2341,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "roundInfos",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint24,t_struct(RoundInfo)2325_storage)"
      },
      {
        "astId": 2348,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "roundUserInfos",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint24,t_mapping(t_address,t_struct(UserInfo)2332_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)753": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)2332_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DailyPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2332_storage"
      },
      "t_mapping(t_uint24,t_mapping(t_address,t_struct(UserInfo)2332_storage))": {
        "encoding": "mapping",
        "key": "t_uint24",
        "label": "mapping(uint24 => mapping(address => struct DailyPool.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)2332_storage)"
      },
      "t_mapping(t_uint24,t_struct(RoundInfo)2325_storage)": {
        "encoding": "mapping",
        "key": "t_uint24",
        "label": "mapping(uint24 => struct DailyPool.RoundInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoundInfo)2325_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoundInfo)2325_storage": {
        "encoding": "inplace",
        "label": "struct DailyPool.RoundInfo",
        "members": [
          {
            "astId": 2314,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "question",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2316,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "encryptedAnswer",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2318,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "attendance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 2320,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "answer",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2322,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "prize",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2324,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "platformFeeTransferred",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)2332_storage": {
        "encoding": "inplace",
        "label": "struct DailyPool.UserInfo",
        "members": [
          {
            "astId": 2327,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "isAnswered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2329,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "encryptedAnswer",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2331,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "prize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}